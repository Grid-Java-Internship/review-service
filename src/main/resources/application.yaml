spring:
  profiles:
    active: default
  application:
    name: ${SPRING_APP_NAME:review-service}
  datasource:
    url: jdbc:${DB_TYPE:postgresql}://${DB_HOST:postgres}:${DB_PORT:5432}/${DB_NAME:review_service}
    username: ${DB_USER:pgAdmin}
    password: ${DB_PASSWORD:password}
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        dialect: org.hibernate.dialect.PostgreSQLDialect
  rabbitmq:
    host: ${RABBITMQ_HOST:rabbitmq}
    username: ${RABBITMQ_USERNAME:guest}
    password: ${RABBITMQ_PASSWORD:guest}
    queues:
      producer:
        added-review: ${RABBITMQ_QUEUE_ADDED_REVIEW:addedReview}
      enableJob: ${RABBITMQ_QUEUE_ENABLE_JOB_REVIEWS:enableJobReviewsQueue}
      disableJob: ${RABBITMQ_QUEUE_DISABLE_JOB_REVIEWS:disableJobReviewsQueue}
      enableUser: ${RABBITMQ_QUEUE_ENABLE_USER_REVIEWS:enableUserReviewsQueue}
      disableUser: ${RABBITMQ_QUEUE_DISABLE_USER_REVIEWS:disableUserReviewsQueue}

server:
  port: 8084

logging:
  pattern:
    console: ${LOG_PATTERN_CONSOLE:%green(%d{HH:mm:ss.SSS}) %blue(%-5level) %red([%thread]) %yellow(%logger{15}) - %msg%n}

management:
  endpoints:
    web:
      exposure:
        include=*:

microservicesUrls:
  user-service: "http://user-service:8081"
  job-service: "http://job-service:8082"
  reservation-service: "http://reservation-service:8083"

security:
  paths:
    permittedRequestsForAllUsers:
      - method: GET
        pattern: /v1/review/{id}
      - method: GET
        pattern: /v1/review/{type}/{id}
      - method: GET
        pattern: /v1/review/rating/{type}/{id}
      - method: GET
        pattern: /v1/review/leftReviews/{id}/**

    permittedRequestsForUsersOrAdminOrSuperAdmin:
      - method: POST
        pattern: /v1/review
      - method: DELETE
        pattern: /v1/review/{id}
      - method: PUT
        pattern: /v1/review/edit
    permittedRequestsForAdminOrSuperAdmin: [ ]
    permittedRequestForSuperAdmin: [ ]